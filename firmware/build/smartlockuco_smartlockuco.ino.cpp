// automatically generated by arduino-cmake
#line 1 "/Users/franciscozuritagonzalez/Desktop/personal folder/Proyecto/smarlockuco/smartlockuco/smartlockuco.ino"
#include <Arduino.h>
#include <EventManager.h>
#include <PN532.h>

#define ID "12345678"


#define SCK         13
#define MOSI        11
#define SS          10
#define MISO        12

#line 15 "/Users/franciscozuritagonzalez/Desktop/personal folder/Proyecto/smarlockuco/smartlockuco/build/smartlockuco_smartlockuco.ino.cpp"
#include "Arduino.h"

//=== START Forward: /Users/franciscozuritagonzalez/Desktop/personal folder/Proyecto/smarlockuco/smartlockuco/smartlockuco.ino
 void tarjectDetectionQueue() ;
 void tarjectDetectionQueue() ;
 void inputInterface();
 void inputInterface();
 void tarjectDetection( int event, int param ) ;
 void tarjectDetection( int event, int param ) ;
 void getConfirmationFromServer( int event, int param ) ;
 void getConfirmationFromServer( int event, int param ) ;
 void setup() ;
 void setup() ;
 void loop() ;
 void loop() ;
 void getConfirmationFromServerQueue();
 void getConfirmationFromServerQueue();
//=== END Forward: /Users/franciscozuritagonzalez/Desktop/personal folder/Proyecto/smarlockuco/smartlockuco/smartlockuco.ino
#line 11 "/Users/franciscozuritagonzalez/Desktop/personal folder/Proyecto/smarlockuco/smartlockuco/smartlockuco.ino"


PN532 nfc(SCK, MISO, MOSI, SS);

int ledPin = 8;
int ledPin1 = 13;
int inPin = 2; // pin 2 asignado para el pulsador
String cadena;

EventManager gEM;


void tarjectDetectionQueue()
{
    gEM.queueEvent( EventManager::kEventUser0, HIGH);
}

void inputInterface(){
    cadena = "";
    byte posicion = 0;
    int valor;
    //memset borra el contenido del array  "cadena" desde la posición 0 hasta el final sizeof

    while(Serial.available()>0){
        delay(5); //Poner un pequeño delay para mejorar la recepción de datos
        cadena += (char)Serial.read();//Lee un carácter del string "cadena" de la "posicion", luego lee el siguiente carácter con "posicion++"
        posicion++;
    }
}
// Our listener will simply toggle the state of pin 13
void tarjectDetection( int event, int param )
{

    digitalWrite(ledPin, HIGH);
    Serial.println("Tarjeta Leida");
    delay(2000);
    Serial.println("Tarjeta Enviada");
    digitalWrite(ledPin, LOW);
}

void getConfirmationFromServer( int event, int param )
{
    if(cadena == "success"){
        Serial.println("Success!!");
        //ledSuccessQueue();
        digitalWrite(ledPin1, HIGH);
        delay(500);
        digitalWrite(ledPin1, LOW);
        delay(500);
        digitalWrite(ledPin1, HIGH);
        delay(500);
        digitalWrite(ledPin1, LOW);
        delay(500);
    }
    else{
        //ledFailedQueue();
        Serial.println("Failed..");
        digitalWrite(ledPin, HIGH);
        delay(500);
        digitalWrite(ledPin, LOW);
        delay(500);
        digitalWrite(ledPin, HIGH);
        delay(500);
        digitalWrite(ledPin, LOW);
        delay(500);
    }
}

void setup()
{
    Serial.begin(9600);
    nfc.begin();
    nfc.SAMConfig();

    Serial.println("Placa preparada para leer!");
    // Setup
    pinMode( inPin, INPUT );
    pinMode( ledPin, OUTPUT );
    // Add our listener
    gEM.addListener( EventManager::kEventUser0, tarjectDetection );
    gEM.addListener( EventManager::kEventUser1,  getConfirmationFromServer );
    //gEM.addListener( EventManager::kEventUser2, sendCredentialsToServer );
    //gEM.addListener( EventManager::kEventUser3, openDoor );
    //gEM.addListener( EventManager::kEventUser4, blockDoor );
}

void loop()
{
    // Handle any events that are in the queue
    gEM.processEvent();

    uint32_t id = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A);
    if(id != 0){
        tarjectDetectionQueue();
    }
//    if(Serial.available()){
//        inputInterface();
//        getConfirmationFromServerQueue();
//    }
}


void getConfirmationFromServerQueue(){
    gEM.queueEvent( EventManager::kEventUser1, HIGH);
}